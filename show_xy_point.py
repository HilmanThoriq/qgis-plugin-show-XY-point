# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShowXYPoint
                                 A QGIS plugin
 Menampilkan titik berdasarkan input titik koordinat
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hilman Thoriq | SIG UGM 2024
        email                : hilmanthoriq@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.core import QgsPointXY, QgsFeature, QgsGeometry, QgsCoordinateTransform, QgsProject, QgsCoordinateReferenceSystem, QgsCoordinateTransformContext, QgsRectangle, Qgis, QgsVectorLayer, QgsRasterLayer
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.gui import QgsRubberBand
from qgis.core import QgsWkbTypes
from qgis.PyQt.QtCore import Qt

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .show_xy_point_dialog import ShowXYPointDialog
import os.path


class ShowXYPoint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ShowXYPoint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Show XY Point')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ShowXYPoint', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/show_xy_point/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Show XY Point'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Show XY Point'),
                action)
            self.iface.removeToolBarIcon(action)

    def show_point(self):
        """Menampilkan titik pada kanvas QGIS dan mengzoom ke titik tersebut"""
        x = self.dlg.line_edit_x.text()
        y = self.dlg.line_edit_y.text()

        # Cek apakah koordinat valid
        try:
            x = float(x)
            y = float(y)
        except ValueError:
            self.iface.messageBar().pushMessage("Error", "Invalid coordinate values entered", level=Qgis.Critical)
            return

        # Dapatkan kanvas QGIS
        canvas = self.iface.mapCanvas()

        # Dapatkan sistem koordinat layer aktif
        layer = self.iface.activeLayer()
        if layer:
            # Tambahkan pengecekan tipe layer
            if not isinstance(layer, QgsVectorLayer):
                self.iface.messageBar().pushMessage("Error", "Active layer is not a vector layer", level=Qgis.Critical)
                return

            layer_crs = layer.crs()
            canvas_crs = canvas.mapSettings().destinationCrs()
            wgs84_crs = QgsCoordinateReferenceSystem("EPSG:4326")  # WGS84

            # Buat koordinat titik dalam sistem koordinat kanvas
            canvas_point = QgsPointXY(x, y)

            # Cek apakah titik berada dalam jangkauan valid
            if canvas_crs.isGeographic() and (x == float('inf') or y == float('inf')):
                self.iface.messageBar().pushMessage("Error", "Coordinate values are out of range", level=Qgis.Critical)
                return

            # Transformasi koordinat dari sistem koordinat kanvas ke WGS84
            try:
                transform = QgsCoordinateTransform(canvas_crs, wgs84_crs, QgsProject.instance())
                wgs84_point = transform.transform(canvas_point)
            except Exception as e:
                self.iface.messageBar().pushMessage("Error", f"Coordinate transformation to WGS84 failed: {e}", level=Qgis.Critical)
                return

            # Cek apakah titik WGS84 berada dalam jangkauan valid
            if wgs84_point.x() == float('inf') or wgs84_point.y() == float('inf'):
                self.iface.messageBar().pushMessage("Error", "Coordinate values are out of range", level=Qgis.Critical)
                return

            # Transformasi koordinat dari WGS84 ke sistem koordinat layer
            try:
                transform_context = QgsCoordinateTransformContext()
                transform = QgsCoordinateTransform(wgs84_crs, layer_crs, transform_context)
                layer_point = transform.transform(wgs84_point)
            except Exception as e:
                self.iface.messageBar().pushMessage("Error", f"Coordinate transformation to layer CRS failed: {e}", level=Qgis.Critical)
                return

            # Tampilkan titik pada kanvas
            rubberBand = QgsRubberBand(canvas, QgsWkbTypes.PointGeometry)
            rubberBand.addPoint(layer_point)
            rubberBand.setColor(Qt.red)
            rubberBand.setWidth(5)
            canvas.refresh()

            # Tambahkan titik ke layer aktif
            layer.startEditing()
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPointXY(layer_point))
            layer.addFeature(feature)
            layer.commitChanges()

            # Transformasi koordinat titik ke sistem koordinat kanvas
            try:
                transform = QgsCoordinateTransform(layer_crs, canvas_crs, QgsProject.instance())
                canvas_point = transform.transform(layer_point)
            except Exception as e:
                self.iface.messageBar().pushMessage("Error", f"Coordinate transformation to canvas CRS failed: {e}", level=Qgis.Critical)
                return

            # Zoom ke titik yang ditambahkan
            canvas.setExtent(QgsRectangle(canvas_point, canvas_point))
            canvas.refresh()

            # Tampilkan pesan debugging
            print(f"Titik ({x}, {y}) telah ditambahkan ke layer {layer.name()}")
        else:
            self.iface.messageBar().pushMessage("Error", "No active layer selected", level=Qgis.Critical)


    
    def run(self):
        """Menjalankan plugin"""
        self.dlg = ShowXYPointDialog()
        self.dlg.btn_show_point.clicked.connect(self.show_point)  # Menghubungkan tombol Show Point ke fungsi show_point
        self.dlg.show()
        if self.first_start:
            self.first_start = False
